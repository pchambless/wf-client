name: Auto-Assign Issue to Project

on:
  issues:
    types:
      - opened

jobs:
  assign_to_project:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Optional: Cleanup Yarn configurations (if present)
      - name: Remove Yarn Configurations (If Needed)
        run: rm -rf .yarn .yarnrc

      # Step 3: Create a minimal package.json file for dependency installation
      - name: Create package.json for Dependencies
        run: echo '{}' > package.json

      # Step 4: Install GraphQL library using NPM
      - name: Install Octokit GraphQL Library Using NPM
        run: npm install @octokit/graphql --legacy-peer-deps

      # Step 5: Debug Environment Variables
      # Logs the Project ID and Issue Node ID for verification.
      - name: Debug Workflow Environment
        run: |
          echo "Project ID: PVT_kwHOAq2Mhc4A2FS_"
          echo "Issue Node ID: ${{ github.event.issue.node_id }}"

      # Step 6: Add Issue to Project via GraphQL Mutation
      - name: Add Issue to Project via GraphQL
        env:
          GITHUB_TOKEN: ${{ secrets.MY_SECRET_PAT }} # Ensure this secret is correctly set in your repo
          ISSUE_NODE_ID: ${{ github.event.issue.node_id }}
        run: |
          node -e "
          const { graphql } = require('@octokit/graphql');

          const token = process.env.GITHUB_TOKEN;
          const graphqlWithAuth = graphql.defaults({
            headers: {
              authorization: \`token ${token}\`,
            },
          });

          (async () => {
            try {
              const projectId = 'PVT_kwHOAq2Mhc4A2FS_';  // Replace with your actual project ID
              const contentId = process.env.ISSUE_NODE_ID; // Dynamically fetch issue node_id

              // Log values for debugging
              console.log('Project ID:', projectId);
              console.log('Content ID:', contentId);

              // Execute GraphQL Mutation
              await graphqlWithAuth(\`
                mutation ($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }
              \`, { projectId, contentId });

              console.log('Issue successfully added to project.');
            } catch (error) {
              console.error('Failed to add issue to project:', error);
              process.exit(1);
            }
          })();
          "
